@page "/addinsect"
@using InsectsPublicCyclopedia.Data
@inject InsectsDbContext DbContext
@inject HttpClient Http

<h3>Add New Insect</h3>
<EditForm Model="@insect" OnValidSubmit="HandleValidSubmit">
    <InputFile OnChange="OnFileChange" />
    <InputText @bind-Value="insect.Name" readonly="true" placeholder="Insect Name" />
    <InputTextArea @bind-Value="insect.Description" readonly="true" placeholder="Insect Description" />
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Inject] public IConfiguration Configuration { get; set; }

    private Insect insect = new Insect();
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        using (var memoryStream = new MemoryStream())
        {
            await imageFile.OpenReadStream().CopyToAsync(memoryStream);
            insect.Image = memoryStream.ToArray();
        }

        // Prepare API Key from appsettings.json
        var apiKey = Configuration["OpenAI:ApiKey"];

        // Prepare the request
        var httpRequestMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                RequestUri = new Uri("https://api.openai.com/v1/chat/completions"),
                Headers =
                {
                    { "Authorization", $"Bearer {apiKey}" },
                },
                Content = JsonContent.Create(new
                {
                    model = "gpt-3.5-turbo",
                    messages = new[]
                        {
                        new { role = "system", content = "You are an expert in identifying insects." },
                        new { role = "user", content = "Describe this insect and provide its name." }
                    },
                    max_tokens = 100
                })
            };

        var response = await Http.SendAsync(httpRequestMessage);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ChatGPTResponse>();
            insect.Name = result.Choices[0].Text.Split('\n')[0];
            insect.Description = result.Choices[0].Text.Split('\n')[1];
        }
        else
        {
            // Handle error
            Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
        }
    }

    private async Task HandleValidSubmit()
    {
        DbContext.Insects.Add(insect);
        await DbContext.SaveChangesAsync();
    }

    public class ChatGPTResponse
    {
        public List<Choice> Choices { get; set; }
    }

    public class Choice
    {
        public string Text { get; set; }
    }
}
